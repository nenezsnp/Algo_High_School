// COMNET
/*input
1
3 3 2
1 2 1
1 3 2
2 3 3
3 2 2 4 3 4
1 1 1 4
*/
#include <stdio.h>
#include <iostream>
#define pa pair<int,int>
#define For(i,a,b) for(int i=(a);i<=(b);++i)
using namespace std;
const int N = 100005, M = 1000005;
int n,m,t,q, c[M], ol[M];
pa E[M];
int node, u , v, pset[N];
int finds(int u){
	return (u == pset[u] ? u : pset[u] = finds(pset[u]));
}
bool sames(int u,int v){ return (finds(u) == finds(v)); }
bool unions(int u,int v){
	pset[finds(u)] = finds(v);
}
void solve(int node){
	for(int i=1;i<=n;++i) pset[i] = i;
	for(int i=1;i<=m;++i) if (c[i] < c[node]) unions(E[i].first, E[i].second);
	for(int i=1;i<=m;++i) c[i] = ol[i];
	if (sames(E[node].first, E[node].second)) printf ("YES\n");
	else printf ("NO\n");
}
int j;
int main(){
	scanf ("%d", &t);
	while (t--){
		scanf ("%d%d%d", &n , &m, &q);
		for(int i=1;i<=m;++i) scanf ("%d%d%d", &E[i].first , &E[i].second, &c[i]);
		for(int i=1;i<=m;++i) ol[i] = c[i];
		for(int i=1;i<=q;++i){
			scanf ("%d", &node);
			scanf("%d", &j);
			for(int j_=1;j_ <= j ; ++j_){
				scanf ("%d%d", &u, &v); c[u] = v;
			}
			//solve(node);
			For(j,1,n) pset[j] = j;
			For(j,1,m) if (c[j] < c[node]) unions(E[j].first, E[j].second);
			For(j,1,m) c[j] = ol[j];
			if (sames(E[node].first, E[node].second)) printf ("YES\n");
			else printf ("NO\n");

		}
	}
}
